// Code generated by protoc-gen-go-triple. DO NOT EDIT.
// versions:
// - protoc-gen-go-triple v1.0.5
// - protoc             v3.21.9
// source: node.proto

package node

import (
	context "context"
	protocol "dubbo.apache.org/dubbo-go/v3/protocol"
	dubbo3 "dubbo.apache.org/dubbo-go/v3/protocol/dubbo3"
	invocation "dubbo.apache.org/dubbo-go/v3/protocol/invocation"
	fmt "fmt"
	grpc_go "github.com/dubbogo/grpc-go"
	codes "github.com/dubbogo/grpc-go/codes"
	metadata "github.com/dubbogo/grpc-go/metadata"
	status "github.com/dubbogo/grpc-go/status"
	common "github.com/dubbogo/triple/pkg/common"
	constant "github.com/dubbogo/triple/pkg/common/constant"
	triple "github.com/dubbogo/triple/pkg/triple"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc_go.SupportPackageIsVersion7

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeServiceClient interface {
	GetNodeInfo(ctx context.Context, in *NodeRequest, opts ...grpc_go.CallOption) (*NodeResponse, common.ErrorWithAttachment)
	GetNodeInfoStream(ctx context.Context, opts ...grpc_go.CallOption) (NodeService_GetNodeInfoStreamClient, error)
}

type nodeServiceClient struct {
	cc *triple.TripleConn
}

type NodeServiceClientImpl struct {
	GetNodeInfo       func(ctx context.Context, in *NodeRequest) (*NodeResponse, error)
	GetNodeInfoStream func(ctx context.Context) (NodeService_GetNodeInfoStreamClient, error)
}

func (c *NodeServiceClientImpl) GetDubboStub(cc *triple.TripleConn) NodeServiceClient {
	return NewNodeServiceClient(cc)
}

func (c *NodeServiceClientImpl) XXX_InterfaceName() string {
	return "node.NodeService"
}

func NewNodeServiceClient(cc *triple.TripleConn) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) GetNodeInfo(ctx context.Context, in *NodeRequest, opts ...grpc_go.CallOption) (*NodeResponse, common.ErrorWithAttachment) {
	out := new(NodeResponse)
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	return out, c.cc.Invoke(ctx, "/"+interfaceKey+"/GetNodeInfo", in, out)
}

func (c *nodeServiceClient) GetNodeInfoStream(ctx context.Context, opts ...grpc_go.CallOption) (NodeService_GetNodeInfoStreamClient, error) {
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	stream, err := c.cc.NewStream(ctx, "/"+interfaceKey+"/GetNodeInfoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeServiceGetNodeInfoStreamClient{stream}
	return x, nil
}

type NodeService_GetNodeInfoStreamClient interface {
	Send(*NodeRequest) error
	Recv() (*NodeResponse, error)
	grpc_go.ClientStream
}

type nodeServiceGetNodeInfoStreamClient struct {
	grpc_go.ClientStream
}

func (x *nodeServiceGetNodeInfoStreamClient) Send(m *NodeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeServiceGetNodeInfoStreamClient) Recv() (*NodeResponse, error) {
	m := new(NodeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeServiceServer is the server API for NodeService service.
// All implementations must embed UnimplementedNodeServiceServer
// for forward compatibility
type NodeServiceServer interface {
	GetNodeInfo(context.Context, *NodeRequest) (*NodeResponse, error)
	GetNodeInfoStream(NodeService_GetNodeInfoStreamServer) error
	mustEmbedUnimplementedNodeServiceServer()
}

// UnimplementedNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServiceServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedNodeServiceServer) GetNodeInfo(context.Context, *NodeRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInfo not implemented")
}
func (UnimplementedNodeServiceServer) GetNodeInfoStream(NodeService_GetNodeInfoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNodeInfoStream not implemented")
}
func (s *UnimplementedNodeServiceServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedNodeServiceServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedNodeServiceServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &NodeService_ServiceDesc
}
func (s *UnimplementedNodeServiceServer) XXX_InterfaceName() string {
	return "node.NodeService"
}

func (UnimplementedNodeServiceServer) mustEmbedUnimplementedNodeServiceServer() {}

// UnsafeNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServiceServer will
// result in compilation errors.
type UnsafeNodeServiceServer interface {
	mustEmbedUnimplementedNodeServiceServer()
}

func RegisterNodeServiceServer(s grpc_go.ServiceRegistrar, srv NodeServiceServer) {
	s.RegisterService(&NodeService_ServiceDesc, srv)
}

func _NodeService_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc_go.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	base := srv.(dubbo3.Dubbo3GrpcService)
	args := []interface{}{}
	args = append(args, in)
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	invo := invocation.NewRPCInvocation("GetNodeInfo", args, invAttachment)
	if interceptor == nil {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	info := &grpc_go.UnaryServerInfo{
		Server:     srv,
		FullMethod: ctx.Value("XXX_TRIPLE_GO_INTERFACE_NAME").(string),
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		result := base.XXX_GetProxyImpl().Invoke(ctx, invo)
		return result, result.Error()
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_GetNodeInfoStream_Handler(srv interface{}, stream grpc_go.ServerStream) error {
	_, ok := srv.(dubbo3.Dubbo3GrpcService)
	invo := invocation.NewRPCInvocation("GetNodeInfoStream", nil, nil)
	if !ok {
		fmt.Println(invo)
		return nil
	}
	return srv.(NodeServiceServer).GetNodeInfoStream(&nodeServiceGetNodeInfoStreamServer{stream})
}

type NodeService_GetNodeInfoStreamServer interface {
	Send(*NodeResponse) error
	Recv() (*NodeRequest, error)
	grpc_go.ServerStream
}

type nodeServiceGetNodeInfoStreamServer struct {
	grpc_go.ServerStream
}

func (x *nodeServiceGetNodeInfoStreamServer) Send(m *NodeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeServiceGetNodeInfoStreamServer) Recv() (*NodeRequest, error) {
	m := new(NodeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeService_ServiceDesc is the grpc_go.ServiceDesc for NodeService service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeService_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "node.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc_go.MethodDesc{
		{
			MethodName: "GetNodeInfo",
			Handler:    _NodeService_GetNodeInfo_Handler,
		},
	},
	Streams: []grpc_go.StreamDesc{
		{
			StreamName:    "GetNodeInfoStream",
			Handler:       _NodeService_GetNodeInfoStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "node.proto",
}
